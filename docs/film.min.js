(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
	typeof define === 'function' && define.amd ? define(factory) :
	(global.Film = factory());
}(this, (function () { 'use strict';

var index = function (target) {
  var arguments$1 = arguments;

  for (var i = 1; i < arguments.length; i++) {
    var source = arguments$1[i];
    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }
  return target;
};

var DEFAULT_OPTS = {
  frameWidth: null,
  framesPerView: 3,
  speed: 20,
  direction: 'left'
};

var raf = window.requestAnimationFrame
  || window.webkitRequestAnimationFrame
  || window.mozRequestAnimationFrame
  || window.msRequestAnimationFrame
  || function(cb) { return setTimeout(cb, 16) };

var caf = window.cancelAnimationFrame
  || window.webkitCancelAnimationFrame
  || window.mozCancelAnimationFrame
  || window.msCancelAnimationFrame
  || window.clearTimeout;

function getEl(elOrSelector) {
  if (typeof elOrSelector === 'string') {
    return document.querySelector(elOrSelector)
  } else if (elOrSelector.tagName) {
    return elOrSelector
  } else {
    throw new TypeError('Film.js: invalid el')
  }
}

var Film = function Film(el, opts) {
  var this$1 = this;

  this.el = getEl(el);
  this.opts = index({}, DEFAULT_OPTS, opts);
  this.frames = [];

  this._initWrapper();

  var children = this.el.querySelectorAll('.film__frame');

  for (var i = 0; i < children.length; i++) {
    var child = children[i];
    this$1._initFrame(child, i);
    this$1.frames.push(child);
  }

  this.start();
};

var prototypeAccessors = { started: {} };

Film.prototype._initWrapper = function _initWrapper () {
  this.el.style['overflow'] = 'hidden';
};

Film.prototype._initFrame = function _initFrame (frame, i) {
  if (this.opts.frameWidth) {
    frame.moveVal = i * this.opts.frameWidth;
    frame.style.width = (this.opts.frameWidth) + "px";
  } else {
    var winW = window.innerWidth;
    frame.moveVal = i * winW / this.opts.framesPerView;
    frame.style.width = "calc(100vw / " + (this.opts.framesPerView) + ")";
  }

  frame.style.position = 'absolute';
  frame.style.transform = "translateX(" + (frame.moveVal) + "px)";
  frame.style['z-index'] = i;
};

Film.prototype._update = function _update () {
    var this$1 = this;

  var mutates = [];
  var speed = this.opts.speed / 16;
  var updateFunc;

  switch (this.opts.direction) {
    case 'left':
      updateFunc = function () {
          var args = [], len = arguments.length;
          while ( len-- ) args[ len ] = arguments[ len ];

          return (ref = this$1)._updateLeft.apply(ref, args)
          var ref;
    };
      break
    case 'right':
      updateFunc = function () {
          var args = [], len = arguments.length;
          while ( len-- ) args[ len ] = arguments[ len ];

          return (ref = this$1)._updateRight.apply(ref, args)
          var ref;
    };
      break
    default:
      throw new Error('Film.js: invalid direction')
  }

  // batch dom reads
  this.frames.forEach(function (frame, i) {
    updateFunc(frame, i, speed);

    mutates.push(function () {
      frame.style.transform = "translateX(" + (frame.moveVal) + "px)";
    });
  });

  // batch dom writes
  mutates.forEach(function (mutate) { return mutate(); });

  this.reqId = raf(function () { return this$1._update(); });
};

Film.prototype._updateLeft = function _updateLeft (frame, i, speed) {
  frame.moveVal -= speed;

  /* istanbul ignore else */
  if (frame.moveVal + frame.clientWidth < -10) {
    var lastFrameIndex = i === 0 ? i = this.frames.length - 1 : i - 1;
    var lastFrame = this.frames[lastFrameIndex];
    frame.moveVal = Math.floor(lastFrame.moveVal + lastFrame.clientWidth - speed - 1);
  }
};

Film.prototype._updateRight = function _updateRight (frame, i, speed) {
  frame.moveVal += speed;

  if (frame.moveVal - window.innerWidth > 10) {
    var firstFrameIndex = i === this.frames.length - 1 ? 0 : i + 1;
    var firstFrame = this.frames[firstFrameIndex];
    frame.moveVal = Math.floor(firstFrame.moveVal - firstFrame.clientWidth + speed + 1);
  }
};

Film.prototype.start = function start () {
    var this$1 = this;

  this.reqId = raf(function () { return this$1._update(); });
};

Film.prototype.stop = function stop () {
  /* istanbul ignore else */
  if (this.reqId) {
    caf(this.reqId);
    this.reqId = null;
  }
};

Film.prototype.refresh = function refresh () {
    var this$1 = this;

  this.stop();
  this.frames.forEach(function (frame, i) {
    this$1._initFrame(frame, i);
  });
  this.start();
};

prototypeAccessors.started.get = function () {
  return this.reqId !== null
};

Object.defineProperties( Film.prototype, prototypeAccessors );

return Film;

})));
